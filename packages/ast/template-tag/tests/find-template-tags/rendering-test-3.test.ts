import { assert, test } from '@codemod-utils/tests';

import { findTemplateTags } from '../../src/index.js';

test('find-template-tags > rendering test (3)', function () {
  const oldFile = [
    `import Service from '@ember/service';`,
    `import { type Registry as Services, service } from '@ember/service';`,
    `import { click, render, type TestContext } from '@ember/test-helpers';`,
    `import { setupRenderingTest } from 'ember-qunit';`,
    `import Example1 from 'my-app/components/example-1';`,
    `import { module, test } from 'qunit';`,
    ``,
    `module('Integration | Component | example-1', function (hooks) {`,
    `  setupRenderingTest(hooks);`,
    ``,
    `  hooks.beforeEach(function (assert) {`,
    `    this.owner.register(`,
    `      'service:example-1/business-logic',`,
    `      class Example1BusinessLogic extends Service {`,
    `        @service declare intl: Services['intl'];`,
    ``,
    `        get timestamp(): string {`,
    `          return '2025-01-01';`,
    `        }`,
    `      },`,
    `    );`,
    `  });`,
    ``,
    `  test('it renders', async function (assert) {`,
    `    await render(<template><Example1 /></template>);`,
    ``,
    `    assert.ok(true);`,
    `  });`,
    ``,
    `  module('Styles', function () {`,
    `    test('Splattributes', async function (this: TestContext, assert) {`,
    `      await render(`,
    `        <template>`,
    `          <Example1 class="my-style" />`,
    `        </template>,`,
    `      );`,
    ``,
    `      assert.ok(true);`,
    `    });`,
    `  });`,
    ``,
    `  test('We can click on the button', async function (assert) {`,
    `    await render(<template><Example1 class="my-style" /></template>);`,
    ``,
    `    await click('button');`,
    ``,
    `    assert.ok(true);`,
    `  });`,
    `});`,
    ``,
  ].join('\n');

  const templateTags = findTemplateTags(oldFile);

  assert.deepStrictEqual(templateTags, [
    {
      contentRange: {
        endByte: 806,
        endChar: 806,
        startByte: 794,
        startChar: 794,
      },
      contents: '<Example1 />',
      endRange: {
        endByte: 817,
        endChar: 817,
        startByte: 806,
        startChar: 806,
      },
      range: {
        endByte: 817,
        endChar: 817,
        startByte: 784,
        startChar: 784,
      },
      startRange: {
        endByte: 794,
        endChar: 794,
        startByte: 784,
        startChar: 784,
      },
      tagName: 'template',
      type: 'expression',
    },
    {
      contentRange: {
        endByte: 1040,
        endChar: 1040,
        startByte: 991,
        startChar: 991,
      },
      contents: '\n          <Example1 class="my-style" />\n        ',
      endRange: {
        endByte: 1051,
        endChar: 1051,
        startByte: 1040,
        startChar: 1040,
      },
      range: {
        endByte: 1051,
        endChar: 1051,
        startByte: 981,
        startChar: 981,
      },
      startRange: {
        endByte: 991,
        endChar: 991,
        startByte: 981,
        startChar: 981,
      },
      tagName: 'template',
      type: 'expression',
    },
    {
      contentRange: {
        endByte: 1220,
        endChar: 1220,
        startByte: 1191,
        startChar: 1191,
      },
      contents: '<Example1 class="my-style" />',
      endRange: {
        endByte: 1231,
        endChar: 1231,
        startByte: 1220,
        startChar: 1220,
      },
      range: {
        endByte: 1231,
        endChar: 1231,
        startByte: 1181,
        startChar: 1181,
      },
      startRange: {
        endByte: 1191,
        endChar: 1191,
        startByte: 1181,
        startChar: 1181,
      },
      tagName: 'template',
      type: 'expression',
    },
  ]);
});
